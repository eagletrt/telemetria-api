{
	"info": {
		"_postman_id": "0c6aa781-b031-44e0-b960-8fdf63fc1265",
		"name": "eagletrt-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "airtable",
			"item": [
				{
					"name": "docs api",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3333/api-docs/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"api-docs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Request\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    // pm.expect(jsonData.args.isGood).to.eql('true');\r",
									"    // pm.expect(jsonData.args.isBad).to.eql('false');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.github.v3+json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "This API allows to retrieve the list of the members"
					},
					"response": []
				},
				{
					"name": "users/:username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Request\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    // pm.expect(jsonData.args.isGood).to.eql('true');\r",
									"    // pm.expect(jsonData.args.isBad).to.eql('false');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.github.v3+json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:3333/api/v1/users/recLx5MhABv7ZA1Ez",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"api",
								"v1",
								"users",
								"recLx5MhABv7ZA1Ez"
							]
						},
						"description": "This API allows to retrieve member by the github username"
					},
					"response": []
				},
				{
					"name": "add new user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"giovanni\",\r\n    \"surname\": \"verdi\",\r\n    \"username\": \"giovannigreen\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3333/v1/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update users",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"giovanni\",\r\n    \"surname\": \"verdi\",\r\n    \"username\": \"giovannigreen\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "This service is used to retrieve and manage the information about members and the tasks. Each request needs the airtableToken and airtableBase."
		},
		{
			"name": "history",
			"item": [
				{
					"name": "docs api",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3334/api-docs/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3334",
							"path": [
								"api-docs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "data by timestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Request\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    // pm.expect(jsonData.args.isGood).to.eql('true');\r",
									"    // pm.expect(jsonData.args.isBad).to.eql('false');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3334/api/v1/data/32456",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3334",
							"path": [
								"api",
								"v1",
								"data",
								"32456"
							]
						}
					},
					"response": []
				},
				{
					"name": "documents by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Request\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    // pm.expect(jsonData.args.isBad).to.eql('false');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3334/api/v1/documents/32456",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3334",
							"path": [
								"api",
								"v1",
								"documents",
								"32456"
							]
						}
					},
					"response": []
				},
				{
					"name": "from timestamp start to finish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Request\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"JSON Data Response\", function (){\r",
									"    pm.expect(jsonData)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3334/api/v1/data/collection/:start/:finish",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3334",
							"path": [
								"api",
								"v1",
								"data",
								"collection",
								":start",
								":finish"
							],
							"variable": [
								{
									"key": "start",
									"value": "1"
								},
								{
									"key": "finish",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "multiple timestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Request\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"JSON Data Response\", function (){\r",
									"    pm.expect(jsonData)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timestamp\":[1,2,3,4]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3334/api/v1/data/collection/multiples",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3334",
							"path": [
								"api",
								"v1",
								"data",
								"collection",
								"multiples"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}